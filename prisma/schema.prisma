generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String   @id @default(uuid())
  email    String   @unique
  name     String
  password String
  role     UserRole @default(STUDENT)
  status   Status   @default(ACTIVE)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  student    Student?
  instructor Instructor?
  admin      Admin?
}

model Student {
  id           String   @id @unique @default(uuid())
  email        String   @unique
  name         String
  profilePhoto String?
  phone        String?
  contact      String?
  address      String?
  gender       Gender?
  isDeleted    Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  Payment              Payment[]
  assignmentSubmission AssignmentSubmission[]
  quizSubmission       QuizSubmission[]

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  courseId String?
  course   Course?    @relation(fields: [courseId], references: [id])
  Progress Progress[]
}

model Instructor {
  id           String  @id @unique @default(uuid())
  email        String  @unique
  name         String
  profilePhoto String?
  phone        String?
  contact      String?
  address      String?
  gender       Gender?
  Blog         Blog[]

  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId   String  @unique
  user     User    @relation(fields: [userId], references: [id])
  courseId String? @unique
  Course   Course? @relation(fields: [courseId], references: [id])
}

model Admin {
  id           String   @id @unique @default(uuid())
  email        String   @unique
  name         String
  profilePhoto String?
  phone        String?
  contact      String?
  address      String?
  gender       Gender?
  isDeleted    Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])
}

model Course {
  id          String  @id @default(uuid())
  title       String
  price       Float
  isPublished Boolean @default(false)

  module     Module[]
  instructor Instructor?
  student    Student[]
  payment    Payment[]   @relation("CourseToPayment")
  Progress   Progress[]
}

model Module {
  id      String    @id @default(uuid())
  title   String
  content Content[]

  courseId String
  course   Course @relation(fields: [courseId], references: [id])
}

model Content {
  id           String        @id @default(uuid())
  title        String
  video        String?
  description  String?
  quizInstance QuizInstance?
  assignment   Assignment?

  moduleId String
  module   Module @relation(fields: [moduleId], references: [id])
}

model Quiz {
  id            String   @id @default(uuid())
  question      String
  options       String[]
  correctAnswer Int

  quizInstanceId String
  quizInstance   QuizInstance @relation(fields: [quizInstanceId], references: [id])
}

model QuizInstance {
  id        String @id @default(uuid())
  totalMark Int

  quiz           Quiz[] // QuizInstance contains several quizzes
  quizSubmission QuizSubmission[] // QuizInstance contains several userQuizSubmissions.

  contentId String  @unique
  content   Content @relation(fields: [contentId], references: [id])
}

model QuizSubmission {
  id               String   @id @default(uuid())
  correctAnswers   Int
  incorrectAnswers Int
  isCompleted      Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  quizInstanceId String
  quizInstance   QuizInstance @relation(fields: [quizInstanceId], references: [id])
  studentId      String
  student        Student      @relation(fields: [studentId], references: [id])

  @@unique([quizInstanceId, studentId]) // Ensures a student has only one submission per quiz instance
}

model Assignment {
  id        String @id @default(uuid())
  title     String
  totalMark Int

  assignmentSubmission AssignmentSubmission[]

  contentId String  @unique
  content   Content @relation(fields: [contentId], references: [id])
}

model AssignmentSubmission {
  id           String   @id @default(uuid())
  submission   String
  acquiredMark Int      @default(0)
  isSubmitted  Boolean  @default(false)
  isReviewed   Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  assignmentId String
  assignment   Assignment @relation(fields: [assignmentId], references: [id])

  studentId String
  student   Student @relation(fields: [studentId], references: [id])

  @@unique([assignmentId, studentId]) // Ensures a student can submit only once per assignment
}

model Progress {
  id         String @id @default(uuid())
  percentage Int    @default(0) // Progress percentage (0-100)

  studentId  String
  student Student @relation(fields: [studentId], references: [id])
  
  courseId   String
  course  Course  @relation(fields: [courseId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([studentId, courseId]) // Ensures one progress entry per student per course
}

model Blog {
  id          String   @id @default(uuid())
  title       String
  content     String
  author      String
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  authorId   String
  instructor Instructor? @relation(fields: [authorId], references: [id])
}

model Payment {
  id        String        @id @default(uuid())
  amount    Float
  studentId String @unique
  status    PaymentStatus @default(PENDING)
  intendKey String?        @unique
  student   Student       @relation(fields: [studentId], references: [id])
  course    Course[]      @relation("CourseToPayment")
}

enum UserRole {
  ADMIN
  STUDENT
  INSTRUCTOR
  SUPER_ADMIN
}

enum Status {
  BLOCKED
  ACTIVE
  DELETED
}

enum Gender {
  MALE
  FEMALE
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
  CANCELLED
}
