generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String   @id @default(uuid())
  email    String   @unique
  name     String
  password String
  role     UserRole @default(STUDENT)
  status   Status   @default(ACTIVE)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  student    Student?
  instructor Instructor?
  admin      Admin?
  Blog       Blog[]
}

model Student {
  id           String      @id @unique @default(uuid())
  email        String      @unique
  name         String
  profilePhoto String?
  phone        String?
  contact      String?
  address      String?
  gender       Gender?
  Payment      Payment[]
  classroom    Classroom[]

  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String @unique
  User   User   @relation(fields: [userId], references: [id])

  Course     Course?      @relation(fields: [courseId], references: [id])
  courseId   String?
  Assignment Assignment[]
}

model Instructor {
  id           String      @id @unique @default(uuid())
  email        String      @unique
  name         String
  profilePhoto String?
  contact      String?
  address      String?
  gender       Gender?
  classroom    Classroom[]

  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User   User?   @relation(fields: [userId], references: [id])
  userId String? @unique
}

model Admin {
  id           String  @id @unique @default(uuid())
  email        String  @unique
  name         String
  profilePhoto String?
  contact      String?
  address      String?
  gender       Gender?

  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?  @unique
}

model Course {
  id          String     @id @default(uuid())
  title       String
  description String
  price       Float
  isPublished Boolean    @default(false)
  classroom   Classroom?
  modules     Module[]
  student     Student[]
  payment     Payment[]  @relation("CourseToPayment")
}

model Classroom {
  courseId     String     @unique
  instructorId String
  studentId    String
  Course       Course     @relation(fields: [courseId], references: [id])
  Instructor   Instructor @relation(fields: [instructorId], references: [id])
  Student      Student    @relation(fields: [studentId], references: [id])

  @@id([courseId, instructorId, studentId])
}

model Module {
  id         String              @id @default(uuid())
  title      String
  courseId   String?
  assignment AssignmentInstance?
  content    Content[]
  course     Course?             @relation(fields: [courseId], references: [id])
}

model Content {
  id           String        @id @default(uuid())
  title        String
  video        String?
  description  String?
  moduleId     String?
  Module       Module?       @relation(fields: [moduleId], references: [id])
  QuizInstance QuizInstance?
}

model QuizInstance {
  id           String  @id @default(uuid())
  totalMark    Int
  acquiredMark Int
  contentId    String  @unique
  isSubmitted  Boolean @default(false)
  quiz         Quiz[]
  content      Content @relation(fields: [contentId], references: [id])
}

model Quiz {
  id             String        @id @default(uuid())
  question       String
  options        String[]
  correctAnswer  Int?
  quizInstanceId String?
  QuizInstance   QuizInstance? @relation(fields: [quizInstanceId], references: [id])
}

model AssignmentInstance {
  id         String       @id @default(uuid())
  fullMark   Int
  title      String
  assignment Assignment[]
  Module     Module?      @relation(fields: [moduleId], references: [id])
  moduleId   String?      @unique
}

model Assignment {
  id                   String              @id @default(uuid())
  file                 String?
  isSubmitted          Boolean             @default(false)
  accruedMark          Int
  AssignmentInstance   AssignmentInstance? @relation(fields: [assignmentInstanceId], references: [id])
  assignmentInstanceId String?
  Student              Student?            @relation(fields: [studentId], references: [id])
  studentId            String?
}

model Blog {
  id          String   @id @default(uuid())
  title       String
  content     String
  authorId    String
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  author      User     @relation(fields: [authorId], references: [id])
}

model Payment {
  id        String        @id @default(uuid())
  amount    Float
  studentId String
  status    PaymentStatus @default(PENDING)
  intendKey String        @unique
  student   Student       @relation(fields: [studentId], references: [id])
  course    Course[]      @relation("CourseToPayment")
}

enum UserRole {
  ADMIN
  STUDENT
  INSTRUCTOR
  SUPER_ADMIN
}

enum Status {
  BLOCKED
  ACTIVE
  DELETED
}

enum Gender {
  MALE
  FEMALE
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
  CANCELLED
}
